package ent

import (
	"fmt"
)

// Storage is the interface for persistent storage of ents
type Storage interface {
	CreateEnt(e Ent, fieldmap uint64) (id uint64, err error)
	SaveEnt(e Ent, fieldmap uint64) (version uint64, err error)
	LoadEntById(e Ent, id uint64) (version uint64, err error)
	FindEntIdsByIndex(entTypeName, indexName string, key []byte) (ids []uint64, err error)
	LoadEntsByIndex(e Ent, indexName string, key []byte) ([]Ent, error)
	DeleteEnt(e Ent) error
}

// Encoder is the interface for ent field encoders.
// ent.JsonEncoder is an example of an implementation.
type Encoder interface {
	Err() error // returns the error state of the encoder

	BeginEnt(version uint64) // start encoding an ent
	EndEnt()                 // finalize encoding of an ent

	BeginList(length int) // start encoding a list of length
	EndList()             // end encoding a list

	BeginDict(length int) // start encoding a dictionary with length entries
	EndDict()             // end encoding of a dict

	Key(k string) // encode key for a field (value call should follow)

	Str(v string)                 // encode a string value
	Blob(v []byte)                // encode a raw-bytes value
	Int(v int64, bitsize int)     // advisory size
	Uint(v uint64, bitsize int)   // advisory size
	Float(v float64, bitsize int) // advisory size
	Bool(v bool)                  // encode a boolean value
}

// Decoder is the interface for ent field decoders.
// ent.JsonDecoder is an example of an implementation.
type Decoder interface {
	Err() error // returns the error state of the decoder

	// Key reads & returns the next key. Returns "" in case there are no more fields.
	Key() string

	ListHeader() int // decode a list header. Returns known size or -1 if unknown
	DictHeader() int // decode a dict header. Returns known size or -1 if unknown

	// More reports whether there is another element in the current list or dict being decoded.
	// Only used when ListHeader and DictHeader returns -1.
	More() bool

	Str() string  // decode a string field
	Blob() []byte // decode a byte array field
	Bool() bool
	Int(bitsize int) int64     // advisory size
	Uint(bitsize int) uint64   // advisory size
	Float(bitsize int) float64 // advisory size
	Discard()                  // read and discard any value
}

// EntIndexFlag describes properties of an EntIndex
type EntIndexFlag int

const (
	EntIndexUnique = 1 << iota // a unique index entry points to exactly one ent
)

// EntIndex describes a secondary index and are usually generated by entgen
type EntIndex struct {
	Name   string
	Fields uint64 // bitmap of field indices which this index depends on
	Flags  EntIndexFlag
}

// IsUnique is true if a key in index maps to exactly one ent (i.e. keys are unique)
func (x EntIndex) IsUnique() bool { return (x.Flags & EntIndexUnique) != 0 }

// VersionConflictErr is returned when a Save call fails because the ent has changed
// by someone else since it was loaded.
type VersionConflictErr struct {
	Underlying      error // always ErrVersionConflict
	ExpectedVersion uint64
	ActualVersion   uint64
}

func (e *VersionConflictErr) Unwrap() error { return e.Underlying }
func (e *VersionConflictErr) Error() string {
	return fmt.Sprintf("version conflict: expected %d but got %d",
		e.ExpectedVersion, e.ActualVersion)
}

func NewVersionConflictErr(expectedVersion, actualVersion uint64) *VersionConflictErr {
	return &VersionConflictErr{
		Underlying:      ErrVersionConflict,
		ExpectedVersion: expectedVersion,
		ActualVersion:   actualVersion,
	}
}
